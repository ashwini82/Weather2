{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","getWeather","inputValue","document","getElementById","value","fetch","then","response","status","json","data","console","log","setState","time","moment","utcOffset","timezone","format","temperature","Math","round","main","temp","wind","speed","humidity","city","name","description","weather","Country","sys","country","icon","catch","error","className","type","id","placeholder","onClick","this","src","alt","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"oPA0FeA,G,kNAnFbC,MAAQ,G,EAERC,WAAa,WACX,IAAIC,EAAaC,SAASC,eAAe,YAAYC,MAGrDC,MAAM,uDAAyDJ,EAC7D,2DAECK,MAAK,SAACC,GACmB,MAApBA,EAASC,OAMbD,EAASE,OAAOH,MAAK,SAACI,GACpBC,QAAQC,IAAIF,GAEZ,EAAKG,SAAS,CAEZC,KAAMC,MAASC,UAAUN,EAAKO,SAAW,GAAK,IAC3CC,OAAO,QAEVC,YAAaC,KAAKC,MAAMX,EAAKY,KAAKC,MAAQ,QAC1CC,KAAMd,EAAKc,KAAKC,MAChBC,SAAUhB,EAAKY,KAAKI,SACpBC,KAAMjB,EAAKkB,KACXC,YAAanB,EAAKoB,QAAQ,GAAGD,YAC7BE,QAASrB,EAAKsB,IAAIC,QAClBC,KAAMxB,EAAKoB,QAAQ,GAAGI,UAnBxBvB,QAAQC,IACN,sCAAwCL,EAASC,WAuBtD2B,OAAM,SAACC,GACNzB,QAAQC,IAAI,a,uDAMhB,OAEE,yBAAKyB,UAAU,gBAEb,6BACE,wBAAIA,UAAU,cAAd,oBAEF,yBAAKA,UAAU,4BACb,2BAAOA,UAAU,MAAMC,KAAK,OAAOC,GAAG,WAAWC,YAAY,mBAC7D,4BAAQH,UAAU,SAASI,QAASC,KAAK1C,YAAzC,WAEF,yBAAKqC,UAAU,wBACb,uBAAGE,GAAG,QAAQG,KAAK3C,MAAM4B,KACtBe,KAAK3C,MAAMgC,SAEd,2BAAIW,KAAK3C,MAAMe,MAEf,mCACE,0BAAMuB,UAAU,OACbK,KAAK3C,MAAMoB,aAFhB,KAKA,uBAAGoB,GAAG,OAAN,eAAyBG,KAAK3C,MAAM8B,aACpC,6BACE,yCAAea,KAAK3C,MAAM2B,WAE5B,6BACE,2CAAiBgB,KAAK3C,MAAMyB,OAE9B,yBACEmB,IAAG,0CAAqCD,KAAK3C,MAAMmC,KAAhD,QACHU,IAAI,W,GA1EEC,IAAMC,YCMJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFpD,SAASC,eAAe,SDwHpB,kBAAmBoD,WACrBA,UAAUC,cAAcC,MACrBnD,MAAK,SAAAoD,GACJA,EAAaC,gBAEdxB,OAAM,SAAAC,GACLzB,QAAQyB,MAAMA,EAAMwB,a","file":"static/js/main.899650ba.chunk.js","sourcesContent":["import React from \"react\";\nimport moment from \"moment\";\nimport \"./App.css\";\n\n/* 5e0cd4889c06f9c4861fbd431372378f\nhttps://api.openweathermap.org/data/2.5/weather?zip={zip code},{country code}&appid={your api key}*/\nclass App extends React.Component {\n  state = {};\n\n  getWeather = () => {\n    let inputValue = document.getElementById(\"zipInput\").value;\n    /*   fetch(\"https://api.openweathermap.org/data/2.5/weather?zip=\" + inputValue + \",us&appid=\" +\n         process.env.REACT_APP_OW_API_KEY)*/\n    fetch(\"https://api.openweathermap.org/data/2.5/weather?zip=\" + inputValue +\n      \",us&units=metric&appid=5e0cd4889c06f9c4861fbd431372378f\")\n\n      .then((response) => {\n        if (response.status !== 200) {\n          console.log(\n            \"There is some problem.Status Code: \" + response.status)\n          return;\n        }\n\n        response.json().then((data) => {\n          console.log(data);\n\n          this.setState({\n\n            time: moment().utcOffset(data.timezone / 60 / 60)\n              .format('llll'),\n\n            temperature: Math.round(data.main.temp) + \"Â°C\",\n            wind: data.wind.speed,\n            humidity: data.main.humidity,\n            city: data.name,\n            description: data.weather[0].description,\n            Country: data.sys.country,\n            icon: data.weather[0].icon,\n          });\n        });\n      }\n      )\n      .catch((error) => {\n        console.log(\"Error\");\n      });\n  };\n\n  render() {\n\n    return (\n\n      <div className=\"container-md\">\n\n        <div>\n          <h1 className=\"App-header\">Current Weather</h1>\n        </div>\n        <div className=\"display1 text-center p-2\">\n          <input className=\"inp\" type=\"text\" id=\"zipInput\" placeholder=\"Enter Zip Here\"></input>\n          <button className=\"button\" onClick={this.getWeather}>Search</button>\n        </div >\n        <div className=\"display text-center \">\n          <p id=\"city\">{this.state.city}\n            {this.state.Country}\n          </p>\n          <p>{this.state.time}</p>\n\n          <p>Temp:\n            <span className=\"tmp\">\n              {this.state.temperature}\n            </span> </p>\n\n          <p id=\"des\">Description:{this.state.description}</p>\n          <div>\n            <p>Humidity : {this.state.humidity}</p>\n          </div>\n          <div>\n            <p>Wind speed : {this.state.wind}</p>\n          </div>\n          <img\n            src={`http://openweathermap.org/img/w/${this.state.icon}.png`}\n            alt=\"\"\n          ></img>\n\n        </div>\n\n      </div>\n    )\n  };\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}